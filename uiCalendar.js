// Generated by CoffeeScript 1.6.3
/*
# uiCalendar - lightweight JS calendar pop-up
# @author Jiri Hybek <jiri.hybek@cryonix.cz> / Cryonix Innovations <www.cryonix.cz>
*/

var uiCalendar, uiCalendarAuto;

uiCalendar = function(initialOptions) {
  var alignmentEl, calBody, calHeader, calLabel, calNext, calPrev, calWrapper, close, closed, currentDate, endDate, formatDate, handleClick, handleHover, hoverDate, key, monthView, monthViews, normalizeDate, options, originX, originY, parseDate, position, rebuildViews, setValue, startDate, uiEl, update, val, viewDate;
  options = {};
  for (key in initialOptions) {
    val = initialOptions[key];
    options[key] = val;
  }
  currentDate = null;
  viewDate = null;
  startDate = null;
  endDate = null;
  hoverDate = null;
  closed = false;
  monthViews = [];
  normalizeDate = function(dt) {
    dt.setHours(0);
    dt.setMinutes(0);
    dt.setSeconds(0);
    return dt.setMilliseconds(0);
  };
  parseDate = function(dateStr) {
    var dateParts, dt;
    if (dateStr.indexOf(".") >= 0) {
      dateParts = dateStr.split(".").reverse();
    } else if (dateStr.indexOf("-") >= 0) {
      dateParts = dateStr.split("-");
    } else {
      throw "uiCalendar: Unsupported date format";
    }
    if (dateParts.length !== 3) {
      throw "uiCalendar: Invalid date format";
    }
    dt = new Date();
    dt.setFullYear(parseInt(dateParts[0].trim()));
    dt.setMonth(parseInt(dateParts[1].trim()) - 1);
    dt.setDate(parseInt(dateParts[2].trim()));
    normalizeDate(dt);
    return dt;
  };
  formatDate = function(dt) {
    if (options.format === '-') {
      return dt.getFullYear() + '-' + (dt.getMonth() + 1) + '-' + dt.getDate();
    } else if (options.format === '.') {
      return dt.getDate() + '.' + (dt.getMonth() + 1) + '.' + dt.getFullYear();
    } else {
      throw "Invalid date format";
    }
  };
  uiEl = function(tagName, attributes, contents, parent) {
    var el, _ref;
    el = document.createElement(tagName);
    _ref = attributes || {};
    for (key in _ref) {
      val = _ref[key];
      el.setAttribute(key, val);
    }
    if (contents !== null) {
      el.innerHTML = contents;
    }
    if (parent) {
      parent.appendChild(el);
    }
    return el;
  };
  update = function() {
    var stopDate, view, _i, _len, _results;
    stopDate = new Date(viewDate.getTime());
    stopDate.setMonth(stopDate.getMonth() + options.monthCount - 1);
    calLabel.innerHTML = options.monthLabels[viewDate.getMonth()] + (stopDate.getTime() !== viewDate.getTime() ? ' - ' + options.monthLabels[stopDate.getMonth()] : '') + ' ' + viewDate.getFullYear();
    _results = [];
    for (_i = 0, _len = monthViews.length; _i < _len; _i++) {
      view = monthViews[_i];
      _results.push(view.update());
    }
    return _results;
  };
  setValue = function() {
    if (options.range) {
      options.inputFrom.value = formatDate(startDate);
      options.inputTo.value = formatDate(endDate);
    } else {
      options.input.value = formatDate(startDate);
    }
    if (options.closeOnSelect) {
      return close();
    }
  };
  handleClick = function(colEl) {
    if (!options.allowPast && colEl.time < currentDate.getTime()) {
      return false;
    }
    if (!options.allowToday && colEl.time === currentDate.getTime()) {
      return false;
    }
    if (!options.allowFuture && colEl.time > currentDate.getTime()) {
      return false;
    }
    if (options.allowFrom && colEl.time < options.allowFrom.getTime()) {
      return false;
    }
    if (options.allowTo && colEl.time > options.allowTo.getTime()) {
      return false;
    }
    if (options.range) {
      if (startDate === null || (startDate !== null && endDate !== null)) {
        startDate = new Date(colEl.time);
        return endDate = null;
      } else if (colEl.time > startDate.getTime()) {
        endDate = new Date(colEl.time);
        return setValue();
      }
    } else {
      startDate = new Date(colEl.time);
      endDate = new Date(colEl.time);
      return setValue();
    }
  };
  handleHover = function(colEl) {
    return hoverDate = new Date(colEl.time);
  };
  monthView = function(container, refDate) {
    var bodyEl, c, colEl, columnList, headEl, headTr, initialMonth, rowEl, view, viewEl, _i;
    initialMonth = refDate.getMonth();
    refDate.setDate(1);
    refDate.setDate(1 + (options.weekStart - refDate.getDay()));
    normalizeDate(refDate);
    viewEl = uiEl('table', {
      "class": 'ui-calendar-month'
    }, null, container);
    headEl = uiEl('thead', {}, null, viewEl);
    bodyEl = uiEl('tbody', {}, null, viewEl);
    headTr = uiEl('tr', {}, null, headEl);
    columnList = [];
    rowEl = uiEl('tr', {}, null, bodyEl);
    for (c = _i = 0; _i < 35; c = ++_i) {
      if (c < 7) {
        uiEl('th', {}, options.dayLabels[refDate.getDay()], headTr);
      }
      if (refDate.getMonth() === initialMonth || options.fillSpaces) {
        colEl = uiEl('td', {}, refDate.getDate(), rowEl);
        colEl.time = refDate.getTime();
        colEl.addEventListener("click", function(ev) {
          handleClick(ev.toElement);
          return update();
        });
        colEl.addEventListener("mouseover", function(ev) {
          handleHover(ev.toElement);
          return update();
        });
        columnList.push(colEl);
      } else {
        colEl = uiEl('td', {
          "class": 'fill'
        }, '&nbsp;', rowEl);
        colEl.time = -1;
      }
      refDate.setDate(refDate.getDate() + 1);
      if (refDate.getDay() === options.weekStart) {
        rowEl = uiEl('tr', {}, null, bodyEl);
      }
    }
    return view = {
      update: function() {
        var classes, _j, _len, _results;
        _results = [];
        for (_j = 0, _len = columnList.length; _j < _len; _j++) {
          colEl = columnList[_j];
          classes = [];
          if (colEl.time < currentDate.getTime()) {
            classes.push("past");
          }
          if (colEl.time === currentDate.getTime()) {
            classes.push("today");
          }
          if (colEl.time > currentDate.getTime()) {
            classes.push("future");
          }
          if ((!options.allowToday && colEl.time === currentDate.getTime()) || (!options.allowPast && colEl.time < currentDate.getTime()) || (!options.allowFuture && colEl.time > currentDate.getTime()) || (options.allowFrom && colEl.time < options.allowFrom.getTime()) || (options.allowTo && colEl.time > options.allowTo.getTime())) {
            classes.push("disabled");
          }
          if ((startDate && colEl.time === startDate.getTime()) || (startDate && endDate && colEl.time >= startDate.getTime() && colEl.time <= endDate.getTime())) {
            classes.push("selected");
          }
          if (startDate && !endDate && hoverDate && colEl.time > startDate.getTime() && colEl.time < hoverDate.getTime()) {
            classes.push("selection");
          }
          _results.push(colEl.setAttribute('class', classes.join(" ")));
        }
        return _results;
      },
      destroy: function() {
        return viewEl.parentElement.removeChild(viewEl);
      }
    };
  };
  rebuildViews = function(container, initialDate) {
    var dt, i, view, _i, _j, _len, _ref;
    for (_i = 0, _len = monthViews.length; _i < _len; _i++) {
      view = monthViews[_i];
      view.destroy();
    }
    monthViews = [];
    for (i = _j = 0, _ref = options.monthCount || 1; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      dt = new Date(initialDate.getTime());
      dt.setMonth(dt.getMonth() + i);
      monthViews.push(monthView(calWrapper, dt));
    }
    return update();
  };
  close = function() {
    if (!closed) {
      calWrapper.parentElement.removeChild(calWrapper);
    }
    return closed = true;
  };
  /* INIT*/

  if (options.weekStart === void 0) {
    options.weekStart = 1;
  }
  if (options.monthOffset === void 0) {
    options.monthOffset = 1;
  }
  if (options.monthCount === void 0) {
    options.monthCount = 1;
  }
  if (options.format === void 0) {
    options.format = '-';
  }
  if (!options.dayLabels) {
    options.dayLabels = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  }
  if (!options.monthLabels) {
    options.monthLabels = ["January", "February", "March", "April", "May", "Jun", "July", "August", "September", "October", "November", "December"];
  }
  if (options.closeOnSelect === void 0) {
    options.closeOnSelect = false;
  }
  if (options.closeOnBlur === void 0) {
    options.closeOnBlur = false;
  }
  if (options.range === void 0) {
    options.range = false;
  }
  if (options.fillSpaces === void 0) {
    options.fillSpaces = true;
  }
  if (options.allowFuture === void 0) {
    options.allowFuture = true;
  }
  if (options.allowToday === void 0) {
    options.allowToday = true;
  }
  if (options.allowPast === void 0) {
    options.allowPast = true;
  }
  options.allowFrom = options.allowFrom ? parseDate(options.allowFrom) : null;
  options.allowTo = options.allowTo ? parseDate(options.allowTo) : null;
  currentDate = new Date();
  normalizeDate(currentDate);
  if (options.startDate) {
    startDate = parseDate(options.startDate);
  }
  if (options.endDate) {
    endDate = parseDate(options.endDate);
  }
  viewDate = options.initidalDate ? parseDate(options.initidalDate) : new Date();
  if (options.range) {
    if (!options.inputFrom || !options.inputTo) {
      throw "Input fields (from & to) are not defined!";
    }
    if (options.inputFrom.value.trim() !== "" && options.inputTo.value.trim() !== "") {
      startDate = parseDate(options.inputFrom.value);
      endDate = parseDate(options.inputTo.value);
      viewDate = new Date(startDate);
    }
  } else {
    if (!options.input) {
      throw "Input field are not defined!";
    }
    if (options.input.value.trim() !== "") {
      startDate = parseDate(options.input.value);
      endDate = new Date(startDate);
      viewDate = new Date(startDate);
    }
  }
  calWrapper = uiEl('div', {
    "class": 'ui-calendar'
  }, null, options.container);
  calHeader = uiEl('div', {
    "class": 'ui-calendar-header'
  }, null, calWrapper);
  calBody = uiEl('div', {
    "class": 'ui-calendar-body'
  }, null, calWrapper);
  calPrev = uiEl('span', {
    "class": 'ui-calendar-prev'
  }, '◄', calHeader);
  calNext = uiEl('span', {
    "class": 'ui-calendar-next'
  }, '►', calHeader);
  calLabel = uiEl('span', {
    "class": 'ui-calendar-label'
  }, null, calHeader);
  calPrev.addEventListener("click", function() {
    viewDate.setMonth(viewDate.getMonth() - 1);
    return rebuildViews(calBody, viewDate);
  });
  calNext.addEventListener("click", function() {
    viewDate.setMonth(viewDate.getMonth() + 1);
    return rebuildViews(calBody, viewDate);
  });
  calWrapper.addEventListener("click", function(ev) {
    ev.stopPropagation();
    ev.preventDefault();
    return false;
  });
  document.body.addEventListener("click", function(ev) {
    if (options.closeOnBlur) {
      return close();
    }
  });
  rebuildViews(calBody, viewDate);
  if (options.popup) {
    alignmentEl = options.input || options.inputFrom;
    originX = alignmentEl.offsetLeft + Math.round(alignmentEl.offsetWidth / 2);
    originY = alignmentEl.offsetTop + Math.round(alignmentEl.offsetHeight / 2);
    position = 0;
    if (originY - calWrapper.offsetHeight < 0) {
      position = 1;
    }
    if (position === 1 && originX + calWrapper.offsetWidth > document.body.clientWidth) {
      position = 2;
    }
    if (position === 2 && originY + calWrapper.offsetHeight > document.body.clientHeight) {
      position = 3;
    }
    switch (position) {
      case 0:
        calWrapper.style.left = (originX - Math.round(calWrapper.offsetWidth / 2)) + 'px';
        calWrapper.style.top = (originY - calWrapper.offsetHeight - alignmentEl.offsetHeight - 5) + 'px';
        calWrapper.classList.add('ui-calendar-arrow-bot');
        break;
      case 1:
        calWrapper.style.left = (originX + Math.round(alignmentEl.offsetWidth / 2) + 20) + 'px';
        calWrapper.style.top = (originY - Math.round(calWrapper.offsetHeight / 2)) + 'px';
        calWrapper.classList.add('ui-calendar-arrow-left');
        break;
      case 2:
        calWrapper.style.left = (originX - Math.round(calWrapper.offsetWidth / 2)) + 'px';
        calWrapper.style.top = (originY + alignmentEl.offsetHeight + 5) + 'px';
        calWrapper.classList.add('ui-calendar-arrow-top');
        break;
      case 3:
        calWrapper.style.left = (originX - Math.round(alignmentEl.offsetWidth / 2) - calWrapper.offsetWidth - 20) + 'px';
        calWrapper.style.top = (originY - Math.round(calWrapper.offsetHeight / 2)) + 'px';
        calWrapper.classList.add('ui-calendar-arrow-right');
    }
    calWrapper.classList.add('ui-calendar-arrow');
    calWrapper.classList.add('ui-calendar-popup');
  }
  return {
    getStartDate: function() {
      return startDate;
    },
    getEndDate: function() {
      return endDate;
    },
    close: function() {
      return close();
    },
    isClosed: function() {
      return closed;
    }
  };
};

uiCalendarAuto = function(selector, options) {
  var bindCalendar, el, elements, _i, _len, _results;
  if (options == null) {
    options = {};
  }
  bindCalendar = function(el) {
    var cal, key, localOptions, subEl, value, _i, _len, _ref, _results;
    localOptions = {};
    for (key in options) {
      value = options[key];
      localOptions[key] = value;
    }
    localOptions.closeOnSelect = true;
    localOptions.closeOnBlur = true;
    localOptions.container = document.body;
    localOptions.popup = true;
    if (options.range) {
      localOptions.inputFrom = el.querySelector(localOptions.fromSelector || ".start");
      localOptions.inputTo = el.querySelector(localOptions.toSelector || ".end");
    } else {
      localOptions.input = el;
    }
    cal = null;
    _ref = [localOptions.input, localOptions.inputFrom, localOptions.inputTo];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      subEl = _ref[_i];
      if (!subEl) {
        continue;
      }
      subEl.addEventListener("focus", function() {
        if (!cal || (cal && cal.isClosed())) {
          return cal = uiCalendar(localOptions);
        }
      });
      subEl.addEventListener("click", function(ev) {
        ev.stopPropagation();
        ev.preventDefault();
        return false;
      });
      subEl.addEventListener("keydown", function(ev) {
        if (ev.keyCode === 27 && cal) {
          return cal.close();
        }
      });
      subEl.classList.add('ui-calendar-input');
      _results.push(subEl.setAttribute('pattern', '^([0-9]{1,2}\.(\ )?[0-9]{1,2}\.(\ )?[0-9]{4}|[0-9]{4}-[0-9]{1,2}-[0-9]{1,2})$'));
    }
    return _results;
  };
  elements = document.querySelectorAll(selector);
  _results = [];
  for (_i = 0, _len = elements.length; _i < _len; _i++) {
    el = elements[_i];
    _results.push(bindCalendar(el));
  }
  return _results;
};
